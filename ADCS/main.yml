---
- name: Creating Purple Teaming Lab With Automations
  hosts: win_host

  tasks:
  - name: Include encrypted variables
    include_vars:
      file: /home/administrator/Desktop/ansible_project/playbooks/vars/secrets.yml
      
  - name: Set Hostname Variable
    set_fact:
      hostname: "{{ ansible_hostname }}"

  - name: Run basic PowerShell script
    ansible.windows.win_powershell:
      script: |
          Install-WindowsFeature AD-Domain-Services
          Import-Module ADDSDeployment
          Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath “C:\Windows\NTDS” -DomainMode “Default” -DomainName “purplelab.local” -DomainNetbiosName PURPLELAB -ForestMode “Default” -InstallDns:$true -LogPath “C:\Windows\NTDS” -NoRebootOnCompletion:$false -SysvolPath “C:\Windows\SYSVOL” -Force:$true

#  - name: Create new domain in a new forest on the target host
#    microsoft.ad.domain:
#      dns_domain_name: pwc.com
#      safe_mode_password: Password1!
#      reboot: true

#  - name: Create new Windows domain in a new forest with specific parameters
#    microsoft.ad.domain:
#      create_dns_delegation: false
#      database_path: C:\Windows\NTDS
#      dns_domain_name: pwc.com
#      domain_mode: Win2012R2
#      domain_netbios_name: PWC
#      forest_mode: Win2012R2
#      safe_mode_password: Password1!
#      sysvol_path: C:\Windows\SYSVOL
#      install_dns: true
#    register: domain_install

  - name: Reboot host if install requires it
    ansible.windows.win_reboot:
    when: domain_install.reboot_required

  - name: Creating users and groups
    ansible.windows.win_powershell:
      script: |
        $script = (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/wazehell/vulnerable-AD/master/vulnad.ps1')
        Invoke-Expression -Command $script
        Invoke-VulnAD -UsersLimit 20 -DomainName 'pwc.com'
        
  - name: Create shares folder for SMB
    win_file:
      path: C:\shares
      state: directory
        
  - name: Create Samba share for C:\shares
    ansible.windows.win_share:
      name: MyShare
      path: C:\shares
      comment: "Shared folder using Samba"
      read_only: no
      browseable: yes
      guest_ok: no
      state: present
      smb_version: "2.0"

  - name: Set Windows Defender exclusion for a folder
    ansible.windows.win_powershell:
      script: |
        Add-MpPreference -ExclusionPath C:\AtomicRedTeam
    become_user: PWC\Administrator
    register: install_result
    
  - name: Installing Atomic Red Team framework
    ansible.windows.win_powershell:
      script: |
        IEX (IWR 'https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1' -UseBasicParsing);
        Install-AtomicRedTeam 
    become_user: PWC\Administrator
    register: install_result
    
  - name: Installing Atomic Red Team Folders
    ansible.windows.win_powershell:
      script: |
        IEX (IWR 'https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicsfolder.ps1' -UseBasicParsing);
        Install-AtomicsFolder
    become_user: PWC\Administrator
    register: install_result
          
  - name: Installing and testing Sysmon
    ansible.windows.win_powershell:
      script: |
        Invoke-WebRequest -Uri https://download.sysinternals.com/files/Sysmon.zip -OutFile C:\Windows\Temp\Sysmon.zip
        Expand-Archive -LiteralPath C:\Windows\Temp\Sysmon.zip -DestinationPath C:\Windows\Temp\Sysmon -Force
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml -OutFile C:\Windows\Temp\Sysmon\sysmonconfig.xml
        C:\Windows\Temp\Sysmon\Sysmon64.exe -accepteula -i
        C:\Windows\Temp\Sysmon\sysmonconfig.xml
        Get-Service sysmon64
        Get-WinEvent -LogName "Microsoft-Windows-Sysmon/Operational" -MaxEvents 10
    become_user: PWC\Administrator
    register: install_result

  - name: Check if Certification Authority is installed
    win_shell: |
       Get-WindowsFeature -Name ADCS-Cert-Authority | Select-Object -ExpandProperty Installed
    become_user: Administrator
    register: ca_installed_result

  - name: Uninstall Certification Authority if installed
    win_shell: Uninstall-AdcsCertificationAuthority -Force
    when: "'True' in ca_installed_result.stdout"
    become_user: Administrator
    
  - name: Install AD CS feature
    win_feature:
      name: Adcs-Cert-Authority
      include_management_tools: yes
      state: present
      become_user: PWC\Administrator

  - name: Install Certification Authority
    win_shell: Install-AdcsCertificationAuthority -CAType EnterpriseRootCA -CACommonName "CA01.pwc.com" -CADistinguishedNameSuffix "DC=pwc,DC=com" -ValidityPeriod Years    -ValidityPeriodUnits 3 -CryptoProviderName "ECDSA_P256#Microsoft Software Key Storage Provider" -KeyLength 256 -HashAlgorithmName SHA256 -DatabaseDirectory "C:\windows\system32\certLog" -LogDirectory "C:\windows\system32\CertLog" -Force -Confirm:$false
    become_user: PWC\Administrator
    register: install_result
    failed_when: "'The private key \"CA01.pwc.com\" already exists' in install_result.stderr"
    ignore_errors: yes

#  - name: Install role files and dependencies (IIS Server)
#    win_shell: Install-WindowsFeature -Name Web-Server -IncludeManagementTools
#    become_user: PWC\Administrator
#    register: install_result

#  - name: Install AD CS Enrollment Policy Web Service
#    win_shell: |
#       Import-Module ServerManager
#       Add-WindowsFeature Adcs-Enroll-Web-Pol
#       Install-AdcsEnrollmentPolicyWebService -AuthenticationType Kerberos -Force -Confirm:$false
#    become_user: PWC\Administrator
#    register: install_result

#  - name: Install Certification Authority Enrollment Web Service 
#    win_shell: |
#        Import-Module ServerManager
#        Add-WindowsFeature Adcs-Enroll-Web-Svc
#        Install-AdcsEnrollmentWebService -Force -Confirm:$false
#    become_user: PWC\Administrator
#    register: install_result
   
#  - name: Install Online Responder Role Service
#    win_shell: |
#        Import-Module ServerManager
#        Add-WindowsFeature Adcs-Online-Cert
#        Install-AdcsOnlineResponder -Force -Confirm:$false
#    become_user: PWC\Administrator
#    register: install_result

  - name: Install NuGet package provider
    ansible.windows.win_powershell:
      script: |
         Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
    become_user: PWC\Administrator
    register: install_result

  - name: Install ADCSTemplate
    ansible.windows.win_powershell:
      script: |
         Install-Module ADCSTemplate -Force
    become_user: PWC\Administrator
    register: install_result

  - name: Import the ADCSTemplate module if not already loaded
    ansible.windows.win_powershell:
      script: |
         if (-not (Get-Module -Name ADCSTemplate -ErrorAction SilentlyContinue))
         {
            Import-Module ADCSTemplate
         }
    become_user: PWC\Administrator
    register: install_result

  - name: Create temporary new directory
    win_file:
      path: C:\Certificates
      state: directory
    become_user: PWC\Administrator
    register: install_result

  - name: Change to Certificates directory
    ansible.windows.win_shell: |
      cd C:\Certificates
    become_user: PWC\Administrator

  - name: Download .json template files from GitHub repo, Loop through each filename and download the corresponding file.
    ansible.windows.win_powershell:
      script: |
        $fileNames = @(
          "sales.json",
          "accounting.json",
          "ESC3-1.json",
          "ESC3-2.jshon"
         )
         $baseURL = "https://raw.githubusercontent.com/rsecurity12/internship/main/vulnerable-templates/"
         
         foreach ($fileName in $fileNames)
         {
           $url = $baseURL + $fileName
           Invoke-WebRequest -URI $url -OutFile C:\Certificates\$fileName
         }
    become_user: PWC\Administrator
    register: install_result

  - name: Publish and issue vulnerable templates
    ansible.windows.win_powershell:
      script: |
          $folderPath = "C:\Certificates"
          $templates = Get-ChildItem -Path $folderPath -File
          foreach ($template in $templates)
          {
              $templateName = $template.BaseName
              $jsonContent = Get-Content $template.FullName -Raw
              New-ADCSTemplate -DisplayName $templateName -JSON $jsonContent -Publish
              Set-ADCSTemplateACL -DisplayName $templateName -Identity 'PWC\domain users' -Enroll -AutoEnroll
          }          
    become_user: PWC\Administrator
    register: install_result

  - name: Download, publish and issue ssl certificate
    ansible.windows.win_powershell:
      script: |
          $SSLBaseURL = "https://raw.githubusercontent.com/rsecurity12/internship/main/SSL/ssl.json"
          Invoke-WebRequest -URI $SSLBaseURL -OutFile C:\Certificates\ssl.json
          New-ADCSTemplate -DisplayName ssl -JSON (Get-Content C:\Certificates\ssl.json -Raw) -Publish 
          Set-ADCSTemplateACL -DisplayName ssl -Identity 'PWC\domain admins' 
    become_user: PWC\Administrator
    register: install_result 
        
#  - name: Import certificate to Personal store
#    ansible.windows.win_powershell:
#      script: |
#          $PfxBaseURL = "https://github.com/rsecurity12/internship/raw/main/LDAPs/LDAPsCert.pfx"
#          Invoke-WebRequest -URI $PfxBaseURL -OutFile C:\Certificates\LDAPsCert.pfx
#          $pfxPath = "C:\Certificates\LDAPsCert.pfx"
#          $certStorePath = "Cert:\LocalMachine\My"
#          $certPassword = "Password1!"
#          $cert = Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation $certStorePath -Password (ConvertTo-SecureString -String $certPassword -AsPlainText -Force)
#          $cert | Format-List  
      
  - name: Enable connection
    ansible.windows.win_powershell:
      script: |
          New-NetFirewallRule -DisplayName "Allow 389" -Direction Outbound -LocalPort 389 -Protocol TCP -Action Allow
          New-NetFirewallRule -DisplayName "Allow 636" -Direction Outbound -LocalPort 636 -Protocol TCP -Action Allow
          New-NetFirewallRule -DisplayName "Allow 389" -Direction Inbound -LocalPort 389 -Protocol TCP -Action Allow
          New-NetFirewallRule -DisplayName "Allow 636" -Direction Inbound -LocalPort 636 -Protocol TCP -Action Allow
    become_user: PWC\Administrator
    register: install_result

  - name: Check available CA templates
    ansible.windows.win_powershell:
      script: |
          Get-CATemplate
    become_user: PWC\Administrator
    register: install_result
...
